a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = ldply(fitted.model, f_stat)
New_DF <- data.frame(a,b,c)
New_DF <- data.frame(a,b,c,check.rows = TRUE)
z<- merge(a,b)
z
z<- merge(a,b,c)
z<- merge(a,b)
z<- merge(z,c)
z
summary(fitted.model)
summary(fitted.model)$p
summary(fitted.model)$r.squared
f_stat(fitted.model)
summary(fitted.model$`insectivorous.larva / juvenile`)$r.squared
summary(fitted.model$`insectivorous.larva / juvenile`)$p
summary(fitted.model$`insectivorous.larva / juvenile`)$pvalue
summary(fitted.model$`insectivorous.larva / juvenile`)
summary(fitted.model$`insectivorous.larva / juvenile`)$p-value
summary(fitted.model$`insectivorous.larva / juvenile`)$fstatistic
summary(fitted.model$`insectivorous.larva / juvenile`)$pvalue
summary(fitted.model$`insectivorous.larva / juvenile`)$pval
summary(fitted.model$`insectivorous.larva / juvenile`)$p.value
summary(fitted.model$`insectivorous.larva / juvenile`)$P
summary(fitted.model$`insectivorous.larva / juvenile`)
glance(summary(fitted.model$`insectivorous.larva / juvenile`))
library(broom)
library(broom)
anova(fitted.model$`insectivorous.larva / juvenile`)
anova(fitted.model$`insectivorous.larva / juvenile`)$'Pr(>F)'
anova(fitted.model$`insectivorous.larva / juvenile`)$'Pr(>F)[1]'
anova(fitted.model$`insectivorous.larva / juvenile`)$'Pr(>F)'
anova(fitted.model$`insectivorous.larva / juvenile`)$'Pr(>F)'[1]
p_val <- function(x){
anova(x)$'Pr(>F)'[1]
}
d = ldply(fitted.model, p_val )
d
anova(x)$'Pr(>F)'
p_val <- function(x){
anova(x)$'Pr(>F)'
}
d = ldply(fitted.model, p_val )
d
my_lm <- function(x){
lm(log(Predator.mass)~log(Prey.mass), data = x)
} # defines a linear model between Pred mass and Prey mass from the specified data x
fitted.model <- dlply(Data, .(Type.of.feeding.interaction, Predator.lifestage), my_lm)
R_sqr <- function(x) {
summary(x)$r.squared
}
f_stat <- function(x) {
summary(x)$fstatistic
}
p_val <- function(x){
anova(x)$'Pr(>F)'[1]
}
a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = ldply(fitted.model, f_stat)
d = ldply(fitted.model, p_val )
e <- merge(a,b,c,d)
e
e <- merge(a,b)
f <- merge(e,c)
g <- merge(f,d)
g
e
f
g
d
g <- merge(f,d[3])
g
e <- merge.data.frame(a,b)
e
f <- merge.data.frame(e,c)
f
g <- merge.data.frame(f,d)
g
d = ldply(fitted.model, p_val )
d
d[,3]
g <- merge.data.frame(f,d[,3])
g
f <- merge.data.frame(e,c)
g <- merge.data.frame(f,d[,3])
rm(ls=list())
rm(list=ls())
getwd()
setws("../../Week4/Code")
setwd("../../Week4/Code")
Data <- read.table("../Data/SparrowSize.txt",header = TRUE)
x <- [1,2,3,4,8]
x <- c(1,2,3,4,8)
y <- c(4,3,5,7,9)
model1 <- (lm(y~x))
model1
summary(model1)
anova(model1)
resid(model1)
cov(x,y)
#variance
var(x)
#plotting the model
plot(y~x)
plot(abline)
summary(model1)$fstatistic
summary(model1)$p.value
summary(model1)$value
summary(model1)$coeficient
summary(model1)$coeficients
summary(model1)$coefficients
summary(model1)$coefficients[2,4]
summary(model1)$coefficients[,4]
sjt.lm(model1)
require(sjPlot)
require(sjPlot)
sjt.lm(model1)
d <- read.table("../Data/SparrowSize.txt")
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
d <- read.table("../Data/SparrowSize.txt")
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
d
d$Mass
d$mass
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
plot(x,y, xlim=c(0,100), ylim=c(0,100), pch=19, cex=0.5)
x <- c(1:100)
b <- 0.5
m <- 1.5
y <- m*x+b
plot(x,y, xlim=c(0,100), ylim=c(0,100), pch=19, cex=0.5)
plot(d$Mass~d$Tarsus, ylab="Mass (g)", xlab = "Tarsus (mm)",
pch = 19, cex = 0.4, ylim=c(-5,38), xlim = c(0,22))
plot(d$Mass~d$Tarsus, ylab="Mass (g)", xlab = "Tarsus (mm)",
pch = 19, cex = 0.4)
d2 <- subset(d1, d1$Tarsus!="NA")
d1 <- subset(d, d$Mass!="NA")
d2 <- subset(d1, d1$Tarsus!="NA")
model1 <- lm(Mass~Tarsus, data = d2)
summary(model1)
hist(model1$residuals)
#view residuals
head(model1$residuals)
# create a second linear model of straight line
model2<-lm(y~x)
summary(model2)
# run model of z-scores
d2$z.Tarsus <- scale(d2$Tarsus)
model3<- lm(Mass~z.Tarsus, data = d2)
summary(model3)
#plotting results
plot(d2$Mass~d2$z.Tarsus, pch = 19, cex = 0.4)
abline(v=0, lty = "dotted")
head(d)
str(d)
d$Sex <- as.numeric(d$Sex)
plot(d$Wing~d$Sex.1, ylab= "Wing(mm)")
plot(d$Wing~d$Sex, xlab="Sex", xlim=c(-0.1,1.1), ylab = " ")
abline(lm(d$Wing~d$Sex), lwd =2)
text(0.15,76,"intercept")
text(0.9,77.5,"slope", col = "red")
d$Sex <- as.numeric(d$Sex) #change sex to 0 or 1 so can plot
par(mfrow=c(1,2))
plot(d$Wing~d$Sex.1, ylab= "Wing(mm)")
plot(d$Wing~d$Sex, xlab="Sex", xlim=c(-0.1,1.1), ylab = " ")
abline(lm(d$Wing~d$Sex), lwd =2)
rm(list = ls())
load("../Data/GPDDFiltered.RData")
str(gpdd)
head(gpdd)
require(maps)
require(mapdata)
p <- map(database = "world",regions =".",col= 3, fill =FALSE)
p <- p + points(gpdd$lat,gpdd$long, col = "blue", pch = 23, cex =0.5)
setwd("../../Week3/Code")
rm(list = ls())
load("../Data/GPDDFiltered.RData")
str(gpdd)
head(gpdd)
require(maps)
require(mapdata)
p <- map(database = "world",regions =".",col= 3, fill =FALSE)
p <- p + points(gpdd$lat,gpdd$long, col = "blue", pch = 23, cex =0.5)
dev.off()
rm(list = ls())
load("../Data/GPDDFiltered.RData")
str(gpdd)
head(gpdd)
require(maps)
require(mapdata)
p <- map(database = "world",regions =".",col= 3, fill =FALSE)
p <- p + points(gpdd$lat,gpdd$long, col = "blue", pch = 23, cex =0.5)
p <- p + points(gpdd$lat,gpdd$long, na.rm = TRUE, col = "blue", pch = 23, cex =0.5)
gpdd
p <- map(database = "world",regions =".",col= 3, fill =FALSE)
p <- p + points(gpdd$lat,gpdd$long, col = "blue", pch = 23, cex =0.5)
rm(list = ls())
require(ggplot2)
require(plyr) # load packages
Data <- read.csv("../Data/EcolArchives-E089-51-D1.csv") # loads the data
p <- ggplot(Data, aes(x=Prey.mass, y =Predator.mass, colour = Predator.lifestage))
p <- p + geom_point(shape=I(3)) # plotting the points
p <- p + facet_grid(Type.of.feeding.interaction ~.) # seperate plot into different feeding interactions
p <- p + theme(legend.position = "bottom") # plots legend at the bottom
p <- p + theme(legend.title = element_text(face="bold"))# Makes legend title bold
p <- p + scale_x_continuous("Prey mass in grams", trans = "log10") +
scale_y_continuous("Predator mass in grams", trans = "log10")
#plotting the axis
p <- p + theme(panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "grey"))
# Sorts out background and gridlines
p <- p + theme(axis.text = element_text(face = "bold")) # Makes axis text bold
p <- p + geom_smooth(method= "lm", fullrange=TRUE) # plots regression lines
pdf("../Results/Pred_Regress.pdf", 11.7, 8.3)
print(p)
dev.off()
########### Regression results ###########
my_lm <- lm(log(Predator.mass)~log(Prey.mass)*Type.of.feeding.interaction*Predator.lifestage, data = Data)
# provides a linear model of log pred mass against log prey mass
# * feeding interaction and lifestage
sum <- summary(my_lm)
a <- sum$coefficients
b <- my_lm$terms
c <- sum$fstatistic
my_lm <- function(x){
lm(log(Predator.mass)~log(Prey.mass), data = x)
} # defines a linear model between Pred mass and Prey mass from the specified data x
fitted.model <- dlply(Data, .(Type.of.feeding.interaction, Predator.lifestage), my_lm)
R_sqr <- function(x) {
summary(x)$r.squared
}
f_stat <- function(x) {
summary(x)$fstatistic
}
p_val <- function(x){
anova(x)$'Pr(>F)'[1]
}
a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = ldply(fitted.model, f_stat)
a
b
c
d
d = ldply(fitted.model, p_val )
d
e <- merge.data.frame(a,b)
e
f <- merge.data.frame(e,c)
f
g <- merge.data.frame(f,d[,3])
g
e <- bind(a,b)
g <- cbind(f,d[,3])
a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = ldply(fitted.model, f_stat)
d = ldply(fitted.model, p_val )
e <- merge.data.frame(a,b)
f <- merge.data.frame(e,c , all.x = TRUE)
g <- cbind(f,d[,3])
g
c
f <- merge.data.frame(e,c[,3] , all.x = TRUE)
f
f <- cbind(e,c[,3] , all.x = TRUE)
c = ldply(fitted.model, f_stat)[,3]
c
f <- merge.data.frame(e,c , all.x = TRUE)
f
c = as.data.frame(ldply(fitted.model, f_stat)[,3])
c
f <- merge.data.frame(e,c , all.x = TRUE)
f
f <- cbind(e,c)
f <- cbind(e,c, check.names =TRUE)
c = as.data.frame(ldply(fitted.model, f_stat))
f <- merge.data.frame(e,c[,3] , all.x = TRUE)
f
f <- rbind(e,c, check.names =TRUE)
f <- rbind(e,c, check.names =TRUE)
e
c
g <- merge.data.frame(e,d[,3])
a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = as.data.frame(ldply(fitted.model, f_stat))
d = ldply(fitted.model, p_val )
e <- merge.data.frame(a,b)
g <- merge.data.frame(e,d[,3])
g
f <- merge.data.frame(e,c[,3] ,by.x = by, all.x = TRUE)
f <- merge.data.frame(e,c[,3] , all = TRUE)
f
f <- merge(e,c[,3] , all = TRUE)
f
f <- merge(e,c[,3] , by.x =TRUE,all = TRUE)
f <- merge(e,c[,3] , by.x =x,all = TRUE)
f <- merge(e,c[,3] , by.x =Type.of.feeding.interaction ,all = TRUE)
f <- merge(e,c[,3] , by.x =Data$Type.of.feeding.interaction ,all = TRUE)
a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = as.data.frame(ldply(fitted.model, f_stat))
d = ldply(fitted.model, p_val )
e <- merge.data.frame(a,b)
f <- merge(e,c[,3] ,all = TRUE)
f <- merge(e,c[,3] ,all = TRUE, check.names = True)
f <- merge(e,c[,3] ,all = TRUE, check.names = TRUE)
f <- merge(e,c ,all = TRUE, check.names = TRUE)
f
f <- f[1:6]
f
g <- cbind(f,d[,3])
g
a = ldply(fitted.model, coef) # returns all the coefficients from the fitted model
b = ldply(fitted.model, R_sqr)
c = as.data.frame(ldply(fitted.model, f_stat))
d = ldply(fitted.model, p_val )
e <- merge.data.frame(a,b)
f <- merge,data.frame(e,c ,all = TRUE, check.names = TRUE)
f <- f[1:6]
g <- cbind(f,d[,3])
New_DF <- data.frame(g)
colnames(New_DF) <- c("Feeding_Interaction", "Predator_lifestage","Intercept",
"Slope","R_Squared","F_statistic",
"P_Value")
New_DF
write.csv(New_DF, "../Results/PP_Regress_Results.csv",col.names = TRUE,
row.names = TRUE)
write.csv(New_DF, "../Results/PP_Regress_Results.csv")
source("PP_Regress.R")
source("PP_Regress.R")
source("PP_Regress.R")
rm(list=ls())
#import data
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
# plot data interested in
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
#plot a simple linear line
x <- c(1:100)
b <- 0.5
m <- 1.5
y <- m*x+b
plot(x,y, xlim=c(0,100), ylim=c(0,100), pch=19, cex=0.5)
# inspect mass data
d$Mass
length(d$Mass)
d$Mass[1770]
# plot data again
plot(d$Mass~d$Tarsus, ylab="Mass (g)", xlab = "Tarsus (mm)",
pch = 19, cex = 0.4, ylim=c(-5,38), xlim = c(0,22))
# # remove NA's
d1 <- subset(d, d$Mass!="NA")
d2 <- subset(d1, d1$Tarsus!="NA")
# create linear model of subsetted data
model1 <- lm(Mass~Tarsus, data = d2)
# summarize the model
summary(model1)
#plot the residuals
hist(model1$residuals)
#view residuals
head(model1$residuals)
# create a second linear model of straight line
model2<-lm(y~x)
summary(model2)
# run model of z-scores
d2$z.Tarsus <- scale(d2$Tarsus)
model3<- lm(Mass~z.Tarsus, data = d2)
summary(model3)
#plotting results
plot(d2$Mass~d2$z.Tarsus, pch = 19, cex = 0.4)
abline(v=0, lty = "dotted") # plot x axis
#inspect data
head(d)
str(d)
d$Sex <- as.numeric(d$Sex) #change sex to 0 or 1 so can plot
par(mfrow=c(1,2)) # seperate plot area
plot(d$Wing~d$Sex.1, ylab= "Wing(mm)") # plot box plot of sex vs Wing length
plot(d$Wing~d$Sex, xlab="Sex", xlim=c(-0.1,1.1), ylab = " ") # Plot numerical sex against Wing length
abline(lm(d$Wing~d$Sex), lwd =2) # Add a regression line of the linear model
text(0.15,76,"intercept") # annotate the intercept
text(0.9,77.5,"slope", col = "red") # annotate the slope
d4 <- subset(d, d$Wing!="NA")
m4 <- lm(Wing~Sex, data = d4)
t4 <- t.test(d4$Wing~d4$Sex, var.equal=TRUE)
summary(m4)
par(mfrow=c(2,2))
plot(model3)
# create linear model of subsetted data
model1 <- lm(Mass~Tarsus, data = d2)
# summarize the model
summary(model1)
#plot the residuals
hist(model1$residuals)
rm(list=ls())
#import data
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
# plot data interested in
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
#plot a simple linear line
x <- c(1:100)
b <- 0.5
m <- 1.5
y <- m*x+b
plot(x,y, xlim=c(0,100), ylim=c(0,100), pch=19, cex=0.5)
# inspect mass data
d$Mass
length(d$Mass)
d$Mass[1770]
# plot data again
plot(d$Mass~d$Tarsus, ylab="Mass (g)", xlab = "Tarsus (mm)",
pch = 19, cex = 0.4, ylim=c(-5,38), xlim = c(0,22))
# # remove NA's
d1 <- subset(d, d$Mass!="NA")
d2 <- subset(d1, d1$Tarsus!="NA")
# plot data again
plot(d$Mass~d$Tarsus, ylab="Mass (g)", xlab = "Tarsus (mm)",
pch = 19, cex = 0.4, ylim=c(-5,38), xlim = c(0,22))
rm(list=ls())
#import data
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
setwd("../../Week4/Code")
rm(list=ls())
#import data
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
# plot data interested in
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
#plot a simple linear line
x <- c(1:100)
rm(list=ls())
#import data
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
# plot data interested in
plot(d$Mass~d$Tarsus, ylab = "Mass (g)",
xlab = "Tarsus (mm)", pch =19, cex = 0.4)
plot(x,y, xlim=c(0,100), ylim=c(0,100), pch=19, cex=0.5)
#plot a simple linear line
x <- c(1:100)
b <- 0.5
m <- 1.5
y <- m*x+b
plot(x,y, xlim=c(0,100), ylim=c(0,100), pch=19, cex=0.5)
# inspect mass data
d$Mass
length(d$Mass)
d$Mass[1770]
# plot data again
plot(d$Mass~d$Tarsus, ylab="Mass (g)", xlab = "Tarsus (mm)",
pch = 19, cex = 0.4, ylim=c(-5,38), xlim = c(0,22))
# # remove NA's
d1 <- subset(d, d$Mass!="NA")
d2 <- subset(d1, d1$Tarsus!="NA")
# create linear model of subsetted data
model1 <- lm(Mass~Tarsus, data = d2)
# summarize the model
summary(model1)
#plot the residuals
hist(model1$residuals)
#view residuals
head(model1$residuals)
# create a second linear model of straight line
model2<-lm(y~x)
summary(model2)
# run model of z-scores
d2$z.Tarsus <- scale(d2$Tarsus)
model3<- lm(Mass~z.Tarsus, data = d2)
summary(model3)
#plotting results
plot(d2$Mass~d2$z.Tarsus, pch = 19, cex = 0.4)
abline(v=0, lty = "dotted") # plot x axis
#inspect data
head(d)
str(d)
d$Sex <- as.numeric(d$Sex) #change sex to 0 or 1 so can plot
par(mfrow=c(1,2)) # seperate plot area
plot(d$Wing~d$Sex.1, ylab= "Wing(mm)") # plot box plot of sex vs Wing length
plot(d$Wing~d$Sex, xlab="Sex", xlim=c(-0.1,1.1), ylab = " ") # Plot numerical sex against Wing length
abline(lm(d$Wing~d$Sex), lwd =2) # Add a regression line of the linear model
text(0.15,76,"intercept") # annotate the intercept
text(0.9,77.5,"slope", col = "red") # annotate the slope
d4 <- subset(d, d$Wing!="NA")
m4 <- lm(Wing~Sex, data = d4)
t4 <- t.test(d4$Wing~d4$Sex, var.equal=TRUE)
summary(m4)
par(mfrow=c(2,2))
plot(model3)
par(mfrow=c(2,2))
plot(m4)
daphina <- read.delim("../Data/daphnia.txt")
summary(daphina)
daphina
plot(Growth.rate ~ Detergent , data = daphina)
dev.off()
plot(Growth.rate ~ Detergent , data = daphina)
plot(Grwoth.rate ~ Daphina, data = daphina)
plot(Growth.rate ~ Daphina, data = daphina)
plot(Growth.rate ~ Daphnia, data = daphina)
require(dplyr)
require(dplyr)
require(Rcpp)
require("Rcpp")
require("Rcpp")
require(dplyr)
