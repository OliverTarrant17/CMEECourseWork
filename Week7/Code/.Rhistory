rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{ # p0 is a vector of 1000 random numbers from uniform dist between 0.5 and 1.5
#initialize
N<-matrix(NA,numyears,length(p0)) # N is a matrix of NA with numyears rows and len(p0) columns
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
} # Calculate the value of the next population step
}
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
rm(list=ls())
stochrickvect<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{ # p0 is a vector of 1000 random numbers from uniform dist between 0.5 and 1.5
#initialize
N<-matrix(NA,numyears,length(p0)) # N is a matrix of NA with numyears rows and len(p0) columns
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
} # Calculate the value of the next population step
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
source('~/CMEECourseWork/Week3/Code/stochrickvect.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
igraph
install.packages("igraph")
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
setwd("CMEECourseWork/Week7/Code/")
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
net
#Test plot
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
source('~/CMEECourseWork/Week7/Code/Nets.R')
V(net)
V(net)$color
V(net)$colour
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[V(net)$Type]
V(net)$color
colrs
V(net)$Type
V(net)
nodes
nodes$Type
V(net)
net
C(net)
net.c
C(net)
c(net)
c(net)$Type
V(net)$Type
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$Type <- nodes$Type
V(net)$color <- colrs[V(net)$Type]
# Set node size based on Number of PIs:
V(net)$size <- V(net)$Pis*0.9
V(net)$size
V(net)$Pis
source('~/CMEECourseWork/Week7/Code/Nets.R')
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
rm(list = ls())
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/Nets.R')
source('~/CMEECourseWork/Week7/Code/fmr.R')
source('~/CMEECourseWork/Week7/Code/fmr.R')
