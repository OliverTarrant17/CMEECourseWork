rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{ # p0 is a vector of 1000 random numbers from uniform dist between 0.5 and 1.5
#initialize
N<-matrix(NA,numyears,length(p0)) # N is a matrix of NA with numyears rows and len(p0) columns
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
} # Calculate the value of the next population step
}
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
rm(list=ls())
stochrickvect<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{ # p0 is a vector of 1000 random numbers from uniform dist between 0.5 and 1.5
#initialize
N<-matrix(NA,numyears,length(p0)) # N is a matrix of NA with numyears rows and len(p0) columns
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
} # Calculate the value of the next population step
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
source('~/CMEECourseWork/Week3/Code/stochrickvect.R')
chaos_game <- function(repeats=10000){
a <- c(0,0) ; b <- c(3,4) ; c <- c(4,1)
X <- c(0,0)
plot(X[1],X[2],type="p", col ="black", cex=0.2, xlim = c(-1,5),ylim = c(-1,5))
randoms <- runif(repeats,min=0,max=3)
for(i in 1:repeats){
if(randoms[i]<=1){
dir=a
}else if((randoms[i]>1)&(randoms[i]<=2)){
dir=b
}else if(randoms[i]>2){
dir=c
}
X=(X+dir)/2
lines(X[1],X[2],type = "p",col="black",cex=0.2)
}
}
chaos_game()
chaos_game <- function(repeats=100){
a <- c(0,0) ; b <- c(3,4) ; c <- c(4,1)
X <- c(0,0)
plot(X[1],X[2],type="p", col ="black", cex=0.2, xlim = c(-1,5),ylim = c(-1,5))
randoms <- runif(repeats,min=0,max=3)
for(i in 1:repeats){
if(randoms[i]<=1){
dir=a
}else if((randoms[i]>1)&(randoms[i]<=2)){
dir=b
}else if(randoms[i]>2){
dir=c
}
X=(X+dir)/2
lines(X[1],X[2],type = "p",col="black",cex=0.2)
}
}
chaos_game()
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle <- function(start_position,direction,length){
norm_direction <- direction/sqrt(sum(direction^2))
endpoint <- start_position + (norm_direction * length)
abline(start_position,endpoint,col="blue")
return(endpoint)
}
turtle(c(1,1),c(2,2),2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),c(2,2),2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
turtle <- function(start_position,direction,length){
norm_direction <- direction/sqrt(sum(direction^2))
endpoint <- start_position + (norm_direction * length)
segments(x0=start_position[1],y0=start_position[2],x1=endpoint[1],y1=endpoint[2],col="blue")
return(endpoint)
}
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),c(2,2),2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
turtle(c(1,1),c(2,2),2)
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),45,2)
turtle(c(1,1),90,2)
turtle(c(1,1),0,2)
turtle(c(1,1),180,2)
turtle(c(1,1),270,2)
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),180,2)
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),270,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),270,2)
turtle(c(1,1),180,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
turtle(c(1,1),45,2)
turtle(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
elbow(c(1,1),90,2)
turtle(c(1,1),45,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
elbow(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
elbow(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral2(c(1,1),90,2,0.1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
spiral2(c(1,1),90,2,0.1)
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral2(c(1,1),90,2,0.1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral2(c(1,1),90,2,0.1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral2(c(1,1),90,2,0.1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral2(c(1,1),90,2,0.1)
plot()
spiral2 <- function(starting_point,initial_direction,len,min_length=0.01){
length=len
endpoint <- turtle(start_position = starting_point,direction = initial_direction,len)
if(length>min_length){
length = (length*0.9)
spiral2(endpoint,initial_direction-45,length,min_length)
}
}
spiral2(c(1,1),90,2,0.1)
spiral2(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
spiral2(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
tree(c(1,1),90,2)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(0,10),ylim=c(0,10))
tree(c(1,1),90,2)
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
tree(c(1,1),90,2)
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
tree(c(1,1),90,2,0.1)
tree(c(1,1),90,2,0.05)
tree(c(1,1),90,2,0.02)
tree(c(1,1),90,2,0.002)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
tree(c(1,1),90,2,0.02)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern(c(1,1),90,2,0.02)
fern <- function(starting_point,initial_direction,len,min_length=0.01){
length=len
endpoint <- turtle(start_position = starting_point,direction = initial_direction,len)
if(length>min_length){
fern(endpoint,initial_direction+45,length*0.38,min_length)
fern(endpoint,initial_direction,length*0.87,min_length)
}
}
fern(c(1,1),90,2,0.02)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern(c(1,1),90,2,0.02)
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,2,0.02)
fern2 <- function(starting_point,initial_direction,len,min_length=0.01,dir=1){
length=len
endpoint <- turtle(start_position = starting_point,direction = initial_direction,len)
dir=-1*dir
if(length>min_length){
fern2(endpoint,initial_direction-45,length*0.38,min_length,dir)
fern2(endpoint,initial_direction,length*0.87,min_length,dir)
}
}
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,2,0.02)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,2,0.02,1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,2,0.02,1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,2,0.02,1)
plot(1,1,xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,1,0.02,1)
fern2(c(1,1),90,1,0.002,1)
plot(1,1,type="n",xlim=c(-10,10),ylim=c(0,10))
fern2(c(1,1),90,1,0.002,1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
load("/home/oliver/CMEECourseWork/Week9/Results/Results100.rda")
source('~/CMEECourseWork/Week9/Code/Fractals.R')
##### 16. neutral model simulation. Initial community size =100, v= 0.1, duration=200,
question_16 <- function(community_size=100,duration=200,v=0.1){
community <- initialise_max(community_size)
for (i in 2:(duration+1)) { # loop through remaining elements for the vector
community <- neutral_generation_speciation(community,v)
}
# now have community after burn in period
res <- octaves(species_abundance(community))
count <- 1
for(i in 1:2000){
community <- neutral_generation_speciation(community,v)
if(i%%20==0){
res <- sum_vec(res,octaves(species_abundance(community)))
count <- count+1
}
return(res)
}
res <- res/count
xx <- barplot(res, main = "Mean species abundancies over 2000 generation after a 200 generation burn in period", xlab="Octave",ylab="Mean abundance",
ylim=c(0,max(res)+1),col=c("red","magenta","blue","yellow","green","orange"),names.arg = c("1","2","3","4","5","6"), axes=TRUE)
text(x=xx,y=res,label = res,pos=3,cex=0.4,col="black" )
}
question_16()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_16()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_16()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_16()
a <- question_16()
a
a
a
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_16()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_16()
sum_vec(c(1,2),c(3,4))
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
getwd
getwd()
setwd("CMEECourseWork/Week9/Code/")
question_20()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
source('~/CMEECourseWork/Week9/Code/Fractals.R')
elbow(c(1,1),90,1)
plot(0:10,0:10,"n")
elbow(c(1,1),90,1)
tree <- function(starting_point,initial_direction,len,min_length=0.01){
length=len
endpoint <- turtle(start_position = starting_point,direction = initial_direction,len)
if(length>min_length){ # check line length is still big enough
tree(endpoint,initial_direction-45,length,min_length)  #
tree(endpoint,initial_direction+45,length,min_length)
length = (length*0.65) # shortens line
}
}
tree(c(1,1),90,1)
tree <- function(starting_point,initial_direction,len,min_length=0.01){
length=len
endpoint <- turtle(start_position = starting_point,direction = initial_direction,len)
if(length>min_length){ # check line length is still big enough
length = (length*0.65) # shortens line
tree(endpoint,initial_direction-45,length,min_length)  #
tree(endpoint,initial_direction+45,length,min_length)
}
}
tree(c(1,1),90,1)
source('~/CMEECourseWork/Week9/Code/Fractals.R')
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_8()
source('~/CMEECourseWork/Week9/Code/Fractals.R')
plot(0:10,0:10,"n")
tree(c(1,1),90,1)
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_8()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_8()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_12()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_12()
source('~/CMEECourseWork/Week9/Code/Neutral_theory.R')
question_12()
question_16()
source('~/CMEECourseWork/Week9/Code/Results_Read.R')
question_20()
source('~/CMEECourseWork/Week9/Code/Fractals.R')
chaos_game()
chaos_game(5000)
plot(c(0:10),c(0:10),"n")
spiral2(c(3,3),90,2,0.001)
plot(c(0:10),c(0:10),"n")
spiral2(c(2,3),90,4,0.001)
spiral2(c(1,3),90,4,0.001)
plot(c(0:10),c(0:10),"n")
spiral2(c(1,3),90,4,0.001)
plot(c(0:10),c(0:10),"n")
tree(c(1,3),90,4,0.001)
tree(c(1,3),90,2,0.01)
x
q
tree(c(1,3),90,4,0.001)
